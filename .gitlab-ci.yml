image: xwiillz/node-chromium-mongo:lts-bionic

cache:
    key: '${CI_COMMIT_REF_SLUG}-client'
    paths:
        - client/node_modules/
        - server/node_modules/
        - mobile/.gradle/
    policy: pull

.only-client: &only-client
    only:
        refs:
            - master
            - merge_requests
        changes:
            - client/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-client'
        paths:
            - client/node_modules/
        policy: pull

.only-server: &only-server
    image: node:18
    only:
        refs:
            - master
            - merge_requests
        changes:
            - server/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-server'
        paths:
            - server/node_modules/
        policy: pull

.only-mobile: &only-mobile
    image: openjdk:11-jdk
    variables:
        ANDROID_COMPILE_SDK: "32"
        ANDROID_BUILD_TOOLS: "30.0.3"
        ANDROID_SDK_TOOLS: "7583922"
    only:
        refs:
            - master
            - merge_requests
        changes:
            - mobile/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-mobile'
        paths:
           - mobile/.gradle/
        policy: pull

stages:
    - install
    - lint
    - build
    - test
    - deploy

install:webclient:
    stage: install
    <<: *only-client
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline
    cache:
        key: '${CI_COMMIT_REF_SLUG}-client'
        paths:
            - client/node_modules/
            - client/.npm/
        policy: pull-push

install:server:
    stage: install
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
    cache:
        key: '${CI_COMMIT_REF_SLUG}-server'
        paths:
            - server/node_modules/
            - server/.npm/
        policy: pull-push   

install:mobile:
    stage: install
    <<: *only-mobile
    script:
        - cd mobile
        - export GRADLE_USER_HOME=$(pwd)/.gradle
        - chmod +x ./gradlew
        - apt-get --quiet update --yes
        - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
        - mkdir -p android-sdk-linux/cmdline-tools
        - export ANDROID_SDK_ROOT=$PWD/android-sdk-linux
        - cd android-sdk-linux/cmdline-tools
        - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
        - unzip android-sdk.zip
        - rm android-sdk.zip
        - mv cmdline-tools version
        - echo y | version/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
        - echo y | version/bin/sdkmanager "platform-tools" >/dev/null
        - echo y | version/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
        - export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools/
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
        - set +o pipefail
        - yes | version/bin/sdkmanager --licenses
        - set -o pipefail
        - cd ../../

lint:webclient:
    stage: lint
    allow_failure: true
    <<: *only-client
    script:
        - cd client
        - npm run lint

lint:server:
    stage: lint
    allow_failure: true
    <<: *only-server
    script:
        - cd server
        - npm run lint

lint:mobile:
    stage: lint
    allow_failure: true
    <<: *only-mobile
    script:
        - cd mobile
        - export GRADLE_USER_HOME=$(pwd)/.gradle
        - chmod +x ./gradlew
        - apt-get --quiet update --yes
        - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
        - mkdir -p android-sdk-linux/cmdline-tools
        - export ANDROID_SDK_ROOT=$PWD/android-sdk-linux
        - cd android-sdk-linux/cmdline-tools
        - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
        - unzip android-sdk.zip
        - rm android-sdk.zip
        - mv cmdline-tools version
        - echo y | version/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
        - echo y | version/bin/sdkmanager "platform-tools" >/dev/null
        - echo y | version/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
        - export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools/
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
        - set +o pipefail
        - yes | version/bin/sdkmanager --licenses
        - set -o pipefail
        - cd ../../
        - chmod +x ./gradlew
        - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
        
build:webclient:
    stage: build
    <<: *only-client
    script:
        - cd client
        - npm run build
    artifacts:
        paths:
            - client/dist/

build:server:
    stage: build
    <<: *only-server
    script:
        - cd server
        - npm run build
    artifacts:
        paths:
            - server/out/

build:mobile:
    stage: build
    <<: *only-mobile
    script:
        - cd mobile
        - export GRADLE_USER_HOME=$(pwd)/.gradle
        - chmod +x ./gradlew
        - apt-get --quiet update --yes
        - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
        - mkdir -p android-sdk-linux/cmdline-tools
        - export ANDROID_SDK_ROOT=$PWD/android-sdk-linux
        - cd android-sdk-linux/cmdline-tools
        - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
        - unzip android-sdk.zip
        - rm android-sdk.zip
        - mv cmdline-tools version
        - echo y | version/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
        - echo y | version/bin/sdkmanager "platform-tools" >/dev/null
        - echo y | version/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
        - export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools/
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
        - set +o pipefail
        - yes | version/bin/sdkmanager --licenses
        - set -o pipefail
        - cd ../../
        - chmod +x ./gradlew
        - ./gradlew assemblePie
    artifacts:
        paths:
        - mobile/build/outputs/    

test:webclient:
    stage: test
    <<: *only-client
    script:
        - Xvfb :99 -ac -screen 0 1920x1080x24 &
        - cd client
        - npm run coverage -- --browsers=ChromeHeadlessNoSandbox --watch=false
    dependencies:
        - build:webclient
    artifacts:
        paths:
            - client/coverage/

test:server:
    stage: test
    <<: *only-server
    script:
        - cd server
        - npm run test
    dependencies:
        - build:server
    artifacts:
        paths:
            - server/coverage/

deploy:webclient:
    image: node:14.15.0
    stage: deploy
    rules:
        - if: '$CI_COMMIT_TAG =~ /deploy/'
          when: manual
    script:
        - curl -X POST -d {} "https://webhooks.amplify.ca-central-1.amazonaws.com/prod/webhooks?id=42bc4e57-7c85-4758-9cc3-f6eddec2cc1b&token=t0xzDuyCx2YuHTGP6G5Wn811eqWvgwOW6QpNw4TKzU&operation=startbuild" -H "Content-Type:application/json"
    artifacts:
        paths:
            - public

deploy:server:
    stage: deploy
    rules:
        - if: '$CI_COMMIT_TAG =~ /deploy/'
          when: manual
    script:
        - 'which ssh-agent || (apt-get update -qq && apt-get install -qq openssh-client )'
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$EC2_PEM_FILE_CONTENT")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - |
            timeout 600 ssh -t -o ServerAliveInterval=15 -o ServerAliveCountMax=5 "${EC2_USER}@${EC2_HOST}" "
                set -x -ev
                # Force kill any node app or any app running on the server port
                forever stopall && sudo fuser -k '${SERVER_PORT}/tcp' && sudo killall node
                
                # Clone the repository
                git clone 'https://${GITLAB_DEPLOY_TOKEN_USERNAME}:${GITLAB_DEPLOY_TOKEN_PASSWORD}@${GITLAB_REPO_URL}' repo || echo Git repository already exist
                cd repo

                # Checkout to the targeted commit
                git fetch --all
                git checkout ${CI_COMMIT_SHA}

                # Build the project
                cd server
                npm ci
                npm run build

                # Launch the server in background and append output to /var/log/messages for CloudWatch
                forever start -a -l /var/log/messages out/index.js
            "
